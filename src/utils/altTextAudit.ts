// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞—É–¥–∏—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è alt-—Ç–µ–∫—Å—Ç–æ–≤

interface ImageAuditResult {
  element: HTMLImageElement;
  src: string;
  currentAlt: string;
  suggestedAlt: string;
  issues: string[];
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö alt-—Ç–µ–∫—Å—Ç–æ–≤
export const generateProductAlt = (productName: string, context?: string) => {
  const baseAlt = `${productName} - –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì`;
  return context ? `${baseAlt} - ${context}` : baseAlt;
};

export const generateCategoryAlt = (categoryName: string) => {
  return `${categoryName} - –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì`;
};

export const generateBlogAlt = (title: string, isHero = false) => {
  const suffix = isHero ? '–≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏' : '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ —Å—Ç–∞—Ç—å–µ';
  return `${title} - ${suffix} –±–ª–æ–≥–∞ –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì`;
};

export const generateCompanyAlt = (context: string) => {
  return `–ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì - ${context}`;
};

export const generateServiceAlt = (serviceName: string) => {
  return `${serviceName} - —É—Å–ª—É–≥–∏ –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì –ø–æ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é`;
};

export const generateProjectAlt = (projectName: string, stage: 'before' | 'after' | 'process') => {
  const stageText = {
    before: '–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    after: '–ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
    process: '–ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
  };
  return `${projectName} - ${stageText[stage]} –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ alt-—Ç–µ–∫—Å—Ç–∞
const evaluateAltText = (alt: string, src: string): string[] => {
  const issues: string[] = [];
  
  if (!alt || alt.trim() === '') {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç alt-—Ç–µ–∫—Å—Ç');
  } else {
    if (alt.length < 10) {
      issues.push('Alt-—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)');
    }
    if (alt.length > 125) {
      issues.push('Alt-—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–±–æ–ª–µ–µ 125 —Å–∏–º–≤–æ–ª–æ–≤)');
    }
    if (alt.toLowerCase().includes('image') || alt.toLowerCase().includes('picture') || alt.toLowerCase().includes('photo')) {
      issues.push('Alt-—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–ª–æ–≤–∞ (image, picture, photo)');
    }
    if (alt === src || alt.includes(src)) {
      issues.push('Alt-—Ç–µ–∫—Å—Ç –¥—É–±–ª–∏—Ä—É–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
    if (alt.toLowerCase() === 'image' || alt.toLowerCase() === 'img' || alt.toLowerCase() === 'picture') {
      issues.push('Alt-—Ç–µ–∫—Å—Ç –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–µ–Ω');
    }
  }
  
  return issues;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ alt-—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const generateImprovedAlt = (img: HTMLImageElement): string => {
  const src = img.src;
  const className = img.className;
  const parentElement = img.parentElement;
  const nearbyText = img.parentElement?.textContent?.slice(0, 100) || '';
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∫–ª–∞—Å—Å–∞–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
  if (className.includes('logo') || src.includes('logo')) {
    return '–õ–æ–≥–æ—Ç–∏–ø –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì - –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  }
  
  if (className.includes('product') || parentElement?.className.includes('product')) {
    const productName = nearbyText.split('\n')[0]?.trim() || '–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
    return generateProductAlt(productName);
  }
  
  if (className.includes('category') || parentElement?.className.includes('category')) {
    const categoryName = nearbyText.split('\n')[0]?.trim() || '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è';
    return generateCategoryAlt(categoryName);
  }
  
  if (className.includes('hero') || className.includes('banner')) {
    return '–ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è';
  }
  
  if (className.includes('team') || className.includes('about')) {
    return generateCompanyAlt('–∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é');
  }
  
  if (className.includes('project') || parentElement?.className.includes('project')) {
    const projectName = nearbyText.split('\n')[0]?.trim() || '–ü—Ä–æ–µ–∫—Ç';
    return generateProjectAlt(projectName, 'after');
  }
  
  if (className.includes('service') || parentElement?.className.includes('service')) {
    const serviceName = nearbyText.split('\n')[0]?.trim() || '–£—Å–ª—É–≥–∞';
    return generateServiceAlt(serviceName);
  }
  
  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π alt-—Ç–µ–∫—Å—Ç
  if (nearbyText) {
    const firstLine = nearbyText.split('\n')[0]?.trim();
    if (firstLine && firstLine.length > 5) {
      return `${firstLine} - –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì`;
    }
  }
  
  return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ù–û–†–î–ò–ù–ñ–ò–ù–ò–†–ò–ù–ì - –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Å–∏—Å—Ç–µ–º—ã –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É–¥–∏—Ç–∞ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
export const auditPageImages = (): ImageAuditResult[] => {
  const images = document.querySelectorAll('img');
  const results: ImageAuditResult[] = [];
  
  images.forEach(img => {
    const currentAlt = img.alt || '';
    const src = img.src;
    const issues = evaluateAltText(currentAlt, src);
    const suggestedAlt = issues.length > 0 ? generateImprovedAlt(img) : currentAlt;
    
    results.push({
      element: img,
      src,
      currentAlt,
      suggestedAlt,
      issues
    });
  });
  
  return results;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–¥–∏—Ç–∞ (—Ç–æ–ª—å–∫–æ –≤ development)
export const logAltTextAudit = () => {
  if (process.env.NODE_ENV !== 'development') return;
  
  const results = auditPageImages();
  const problemImages = results.filter(result => result.issues.length > 0);
  
  console.group('üñºÔ∏è Alt Text Audit Results');
  console.log(`–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${results.length}`);
  console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${problemImages.length}`);
  
  if (problemImages.length > 0) {
    console.group('–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:');
    problemImages.forEach((result, index) => {
      console.group(`${index + 1}. ${result.src}`);
      console.log('–¢–µ–∫—É—â–∏–π alt:', result.currentAlt || '(–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π alt:', result.suggestedAlt);
      console.log('–ü—Ä–æ–±–ª–µ–º—ã:', result.issues);
      console.groupEnd();
    });
    console.groupEnd();
  } else {
    console.log('‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ alt-—Ç–µ–∫—Å—Ç—ã');
  }
  
  console.groupEnd();
  
  return results;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è alt-—Ç–µ–∫—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –≤ development)
export const autoFixAltTexts = (): number => {
  if (process.env.NODE_ENV !== 'development') {
    console.warn('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ alt-—Ç–µ–∫—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    return 0;
  }
  
  const results = auditPageImages();
  const problemImages = results.filter(result => result.issues.length > 0);
  
  problemImages.forEach(result => {
    result.element.alt = result.suggestedAlt;
  });
  
  if (problemImages.length > 0) {
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${problemImages.length} alt-—Ç–µ–∫—Å—Ç–æ–≤`);
  }
  
  return problemImages.length;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ alt-—Ç–µ–∫—Å—Ç–∞–º
export const generateAltTextReport = () => {
  const results = auditPageImages();
  const problemImages = results.filter(result => result.issues.length > 0);
  
  const report = {
    timestamp: new Date().toISOString(),
    totalImages: results.length,
    problemImages: problemImages.length,
    successRate: ((results.length - problemImages.length) / results.length * 100).toFixed(1),
    issues: problemImages.map(result => ({
      src: result.src,
      currentAlt: result.currentAlt,
      suggestedAlt: result.suggestedAlt,
      issues: result.issues
    }))
  };
  
  return report;
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –≤ development)
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  window.addEventListener('load', () => {
    setTimeout(() => {
      logAltTextAudit();
    }, 1000);
  });
}